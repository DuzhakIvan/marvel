{"version":3,"file":"static/js/869.51d69afa.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/button/button.js","components/randomChar/randomChar.js","components/skeleton/Skeleton.js","components/charInfo/charInfo.js","components/charSearch/charSearch.js","components/charList/charList.js","components/pages/MainPage.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","const Button = (props) => {\r\n    const {name, url} = props;\r\n    return (\r\n        <div>\r\n            <a href={url} className={\"button \" + props.className}>\r\n                <div className=\"inner\">{name}</div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Button;","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from \"../button/button\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\nimport Spinner from '../spinner/spinner.js';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst InfoBlock = styled.div`\r\n    display: flex;\r\n    width: 50%;\r\n    padding: 35px 35px 35px 40px;\r\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.25);\r\n\r\n    img {\r\n        margin-right: 30px;\r\n        width: 180px;\r\n        height: 180px;\r\n        object-fit: 'cover';\r\n    }  \r\n`;\r\n\r\nconst InfoWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2{\r\n        text-transform: uppercase;\r\n        font-size: 29px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    p {\r\n        font-size: 14px;\r\n        margin-bottom: 18px;\r\n    }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: auto;\r\n    width: 232px;\r\n`;\r\n\r\nconst TryBlock = styled.div`\r\n    width: 50%;\r\n    padding: 35px 35px 35px 40px;\r\n    background-color: #232222;\r\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.25);\r\n    position: relative;\r\n\r\n    p{\r\n        color: #FFFFFF;\r\n        font-size: 24px;\r\n        line-height: 28px;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    img {\r\n        position: absolute;\r\n        bottom: 14px;\r\n        right: -40px;\r\n    }\r\n\r\n    button {\r\n        margin-top: 13px;\r\n    }\r\n`;\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({}); // Пустой обьект персонажа куда запишем пришедшие данные с сервера\r\n    const {loading, error, getCharacter, clearError} = useMarvelService(); // Деструтуризируем результат функции сервис\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 30000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => { // Функция получения данных с сервера\r\n        clearError(); // Перед каждым запросом сбрасываем ошибку, если она есть, так как она не дает прогружаться контенту\r\n\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // Получаем случайное id для формирования обьекта персонажа\r\n        getCharacter(id) // Метод получение данных персонажа по id\r\n            .then(onCharLoaded) // Вызываем метод для записи обьекта персонажа с сервера в обьект state\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <Wrapper>\r\n            {/*loading ? <Spinner/> : <View char={char}/> /* Если состояние загрузки ТРУ загрузится вернет Спиннер, ФОЛС - компонент  View */}\r\n\r\n            {errorMessage /* Если не null отобразит компонент */}\r\n            {spinner /* Если не null отобразит компонент */}\r\n            {content /* Если не null отобразит компонент */}\r\n            <TryBlock>\r\n                <p>Random character for today!<br/>\r\n                   Do you want to get to know him better?\r\n                </p>\r\n                <br/>\r\n                <p>Or choose another one</p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"\"/>\r\n            </TryBlock>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\n// Отдельный компонент\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = char;\r\n    const style = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? {objectFit: 'contain'} : {objectFit: 'cover'};\r\n\r\n    return (\r\n        <InfoBlock>\r\n            <img src={thumbnail} alt=\"Random character\" style={{style}} />\r\n            <InfoWrapper>\r\n                <h2>{name}</h2>\r\n                <p>{description}</p>\r\n                <ButtonWrapper>\r\n                    <Button url={homepage} className=\"button__main\" name='homepage'/>\r\n                    <Button url={wiki} className=\"button__secondary\" name='wiki'/>\r\n                </ButtonWrapper>\r\n            </InfoWrapper>\r\n        </InfoBlock>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import styled from \"styled-components\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport Button from \"../button/button\";\r\n\r\nconst BigWrapper = styled.div`\r\n    padding: 25px;\r\n    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.25);\r\n    background-color: #fff;\r\n\r\n    p {\r\n        font-size: 14px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    h5 {\r\n        font-weight: 700;\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    column-gap: 25px;\r\n    margin-bottom: 15px;\r\n\r\n    h4 {\r\n        text-transform: uppercase;\r\n        font-weight: 700;\r\n        font-size: 22px;\r\n        margin-bottom: 35px;\r\n    }\r\n\r\n    img {\r\n        width: 150px;\r\n        height: 150px;\r\n    }\r\n`;\r\n\r\nconst ButtonsWrapper = styled.div`\r\n    display: flex;\r\n    row-gap: 10px;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst List = styled.ul`\r\n    display: flex;\r\n    row-gap: 10px;\r\n    flex-direction: column;\r\n    padding: 10px 0 10px;\r\n\r\n    li {\r\n        padding: 4px 10px;\r\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n        font-size: 14px;\r\n    }\r\n`;\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null); // Пустой обьект персонажа куда запишем пришедшие данные с сервера\r\n    const {loading, error, getCharacter} = useMarvelService();\r\n\r\n    useEffect( () => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    // Функция перезаписывания обьекта char, после получения его в аргумент  \r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    // Метод обновления обьекта state\r\n    const updateChar = () => {\r\n        const charId = props.charId; // Деструктуризируем переменную id из переданных по атрибутам props. \r\n        if (!charId) { // если ID undefined, то прерываем выполнение\r\n            return;\r\n        }\r\n\r\n        getCharacter(charId) // запрашиваем данные по ID обьекта\r\n            .then(onCharLoaded) // Полученные данные с сервера (promise) передаем в функцию \r\n    };\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton />; // Если обьект создан или состояние загрузки, или ошибки - игнорируем / равно <Sceleton/> компоненту\r\n    const errorMessage = error ? <ErrorMessage/> : null; // если состояние error - равен компоненту <ErrorMessage/> / равен ничему\r\n    const spinner = loading ? <Spinner /> : null; // если состояние загрузки - равен <Spinner/> / равен ничему\r\n    const content = !(loading || error || !char) ? ( // если не (состояние загрузки / ошибка / обьект создан)\r\n        <View char={char} />\r\n    ) : null;\r\n\r\n    return (\r\n        <BigWrapper>\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </BigWrapper>\r\n    );\r\n}\r\n\r\n// Дополнительный компонент для разделения логики интерфейса и состояния\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n    const content =\r\n        comics.length === 0 ? ( // Если массив из комиксов пустой\r\n            <li> Not found any comic about this hero!</li>\r\n        ) : (\r\n            comics\r\n                .map((item, i) => {\r\n                    return <li key={i}>{item.name}</li>;\r\n                })\r\n                .slice(0, 10)\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <img src={thumbnail} alt={name} />\r\n                <div>\r\n                    <h4>{name}</h4>\r\n                    <ButtonsWrapper>\r\n                        <Button\r\n                            url={homepage}\r\n                            className=\"button__main\"\r\n                            name=\"homepage\"\r\n                        />\r\n                        <Button\r\n                            url={wiki}\r\n                            className=\"button__secondary\"\r\n                            name=\"wiki\"\r\n                        />\r\n                    </ButtonsWrapper>\r\n                </div>\r\n            </Wrapper>\r\n            <p>{description}</p>\r\n            <h5>Comics:</h5>\r\n\r\n            <List>{content}</List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharInfo;\r\n","import styled from \"styled-components\";\r\nimport Button from \"../button/button\";\r\n\r\nconst Form = styled.form`\r\n    background-color: #FFF;\r\n    display: block;\r\n    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.25);\r\n    padding: 25px 25px 0;\r\n\r\n    label{\r\n        font-weight: 700;\r\n        font-size: 18px;\r\n    }\r\n\r\n    input{\r\n        width: 250px;\r\n        height: 38px;\r\n        background: #FFFFFF;\r\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n        border: none;\r\n        padding: 10px;\r\n    }\r\n\r\n    .search__error{\r\n        font-size: 18px;\r\n        color: #9F0013;\r\n        font-weight: 700;\r\n        display: ${props => props.status=='error' ? \"block\" : \"none\"};\r\n        margin-bottom: 25px;\r\n    }\r\n\r\n    .search__sucсess{\r\n        display: ${props =>props.status=='success' ? \"flex\" : \"none\"};\r\n        justify-content: space-between;\r\n        margin-bottom: 25px;\r\n        align-items: center;\r\n\r\n        p{\r\n            color: #03710E;\r\n            font-size: 18px;\r\n            font-weight: 700;\r\n        }\r\n    }\r\n\r\n    .search__empty{\r\n        display: ${props => props.status=='empty' ? \"flex\" : \"none\"};\r\n        font-size: 18px;\r\n        color: #9F0013;\r\n        font-weight: 700;\r\n        margin-bottom: 25px;\r\n    }\r\n`;\r\n\r\nconst InputWrapper = styled.div`\r\n    margin: 15px 0 25px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst CharSearch = () => {\r\n    return (\r\n        <Form status=\"empty\">\r\n            <label>Or find a character by name:</label>\r\n            <InputWrapper>\r\n                <input type=\"text\" placeholder=\"Enter name\" />\r\n                <Button className='button__main' name='find'/>\r\n            </InputWrapper>\r\n            <p className='search__error'>The character was not found. Check the name and try again</p>\r\n            <div className='search__sucсess'>\r\n                <p>There is! Visit $name page?</p>\r\n                <Button className='button__secondary' name='to page'/>\r\n            </div>\r\n            <p className='search__empty'>This field is required</p>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CharSearch;","import styled from \"styled-components\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./charList.scss\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport CharInfo from \"../charInfo/charInfo\";\r\nimport CharSearch from \"../charSearch/charSearch\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 44px;\r\n    display: grid;\r\n    grid-template-columns: 650px 425px;\r\n    grid-template-rows: auto auto auto;\r\n    gap: 30px 25px;\r\n    align-items: start;\r\n`;\r\n\r\nconst List = styled.div`\r\n    display: grid;\r\n    row-gap: 30px;\r\n    column-gap: 25px;\r\n    grid-template-columns: repeat(3, 200px);\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 30px;\r\n    grid-row: 1 / -1;\r\n`;\r\n\r\nconst CharList = (props) => {\r\n    const [selectedChar, setChar] = useState(null);\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(true);\r\n    const [offset, setOffset] = useState(1542);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {loading, error, getAllCharacters, getAllComics} = useMarvelService();\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",onScroll);\r\n    }, []);\r\n\r\n    useEffect(()=> {\r\n        if (newItemLoading && !loading && !charEnded) {\r\n            onRequest(offset, true);\r\n        }\r\n\r\n        if(!charEnded) {\r\n            window.addEventListener(\"scroll\",onScroll);\r\n        } \r\n    }, [newItemLoading])\r\n\r\n    const onRequest = (offset, initial) => { // Добавляем дополнительный аргумент initial, чтобы знать первичная ли это загрузка\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true) // И проверяем первая загрузка? \r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .finally(() => setNewItemLoading(() => false))\r\n    };\r\n\r\n    const onScroll = () => {\r\n        if (window.innerHeight + window.pageYOffset >= document.body.offsetHeight) {\r\n            setNewItemLoading(true);\r\n            window.removeEventListener(\"scroll\",onScroll);\r\n        }\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        // В функцию передаем новых персонажей (масив)\\\r\n        setCharList((charList) => [...charList, ...newCharList]); // новое значение charList = старое значение + новые персонажи\r\n        setOffset((offset) => offset + 9); // изменяем каждый следущий вызов персонажей на +9\r\n        setCharEnded(newCharList.length < 9 ? true : false);\r\n    };\r\n\r\n    const itemRefs = useRef([]); // Создаем пустой массив для формирования ссылок на ДОМ элементы списка персонажей\r\n\r\n    const onFocus = (i) => {\r\n        // Создаем метод onFocus, аргумент уникальный id элемента(в данном случае индекс в массиве списка персонажей). Метод отвечает за изменение класса и установке фокуса\r\n        itemRefs.current.forEach((item) =>\r\n            item.classList.remove(\"char__item_selected\")\r\n        ); // Перебираем каждый элемент массива ссылок ДОМ и убираем класс\r\n        itemRefs.current[i].classList.add(\"char__item_selected\"); // Добавляем к элементу[индекс] класс\r\n        itemRefs.current[i].focus(); // Устанавливаем фокус на элемент[индекс]\r\n    };\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { objectFit: \"cover\" };\r\n            if (\r\n                item.thumbnail ===\r\n                \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n            ) {\r\n                imgStyle = { objectFit: \"unset\" };\r\n            }\r\n\r\n            return (\r\n                <li\r\n                    className=\"char__item\"\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        // Запускаем функции передаем айди и индекс массива\r\n                        onCharSelected(item.id);\r\n                        onFocus(i);\r\n                    }}\r\n                    // Создаем ref ссылку на элемент DOM\r\n                    ref={(el) => (itemRefs.current[i] = el)}\r\n                    // Доьавляем tabIndex чтобы работало переключение по ТАБ\r\n                    tabIndex=\"0\"\r\n                    // Добавляем событие по кнопке, если пробел или ентер\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \" \" || e.key === \"Enter\") {\r\n                            // Запускаем функции передаем айди и индекс массива\r\n                            e.preventDefault();\r\n                            onCharSelected(item.id);\r\n                            onFocus(i);\r\n                        }\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={item.thumbnail}\r\n                        alt={item.name}\r\n                        style={imgStyle}\r\n                    />\r\n                    <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <List>{items}</List>;\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <ListWrapper>\r\n                <List>\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {items}\r\n                </List>\r\n                <button\r\n                    className=\"button button__main button__long\"\r\n                    disabled={newItemLoading}\r\n                    style={{ display: charEnded ? \"none\" : \"block\" }}\r\n                    onClick={() => onRequest(offset)}\r\n                >\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </ListWrapper>\r\n            <ErrorBoundary>\r\n                <CharInfo charId={selectedChar} />\r\n            </ErrorBoundary>\r\n            <CharSearch />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number,\r\n};\r\n\r\nexport default CharList;\r\n","import ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from \"../../resources//img/vision.png\";\r\nimport RandomChar from \"../randomChar/randomChar\";\r\nimport CharList from \"../charList/charList\";\r\n\r\nconst MainPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n                <CharList/>\r\n            </ErrorBoundary>\r\n            <img className=\"bg-decoration\" src={decoration} alt='vision'/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","name","url","href","className","Wrapper","styled","_templateObject","_taggedTemplateLiteral","InfoBlock","_templateObject2","InfoWrapper","_templateObject3","ButtonWrapper","_templateObject4","TryBlock","_templateObject5","View","_ref","char","description","thumbnail","homepage","wiki","style","objectFit","_jsxs","src","alt","Button","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","_Fragment","BigWrapper","ButtonsWrapper","List","comics","map","item","i","slice","charId","skeleton","Skeleton","Form","status","InputWrapper","type","placeholder","ListWrapper","CharInfo","PropTypes","selectedChar","_useState3","_useState4","charList","setCharList","_useState5","_useState6","newItemLoading","setNewItemLoading","_useState7","_useState8","offset","setOffset","_useState9","_useState10","charEnded","setCharEnded","getAllCharacters","onCharSelected","getAllComics","window","addEventListener","onScroll","onRequest","initial","onCharListLoaded","finally","innerHeight","pageYOffset","document","body","offsetHeight","removeEventListener","newCharList","_toConsumableArray","itemRefs","useRef","onFocus","current","forEach","classList","remove","add","focus","items","arr","imgStyle","ref","el","tabIndex","onKeyDown","e","preventDefault","renderItems","disabled","display","CharSearch","RandomChar","CharList","decoration","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}