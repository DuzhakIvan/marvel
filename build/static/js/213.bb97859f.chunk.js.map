{"version":3,"file":"static/js/213.bb97859f.chunk.js","mappings":"6KAGMA,EAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,IAAAK,GAAAC,EAAAA,EAAAA,GAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAGd,OAHcP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KACfM,MAAQ,CACJC,OAAO,GACVZ,CAAA,CAeA,OAfAa,EAAAA,EAAAA,GAAAlB,EAAA,EAAAmB,IAAA,oBAAAC,MAED,SAAkBH,EAAOI,GACrBC,QAAQC,IAAIN,EAAOI,GACnBG,KAAKC,SAAS,CACVR,OAAO,GAEf,GAAC,CAAAE,IAAA,SAAAC,MAED,WACI,OAAGI,KAAKR,MAAMC,OACHS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAGjBH,KAAKI,MAAMC,QACtB,KAAC7B,CAAA,CAlBc,CAAS8B,EAAAA,WAqB5B,K,oCCfA,IATqB,WAEjB,OACIJ,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAACC,WAAY,MAAOC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAWC,UAAW,UAClIC,IAA8B,aAC9BC,IAAI,SAEjB,C,oOCIA,EAXe,SAACZ,GACZ,IAAOa,EAAab,EAAba,KAAMC,EAAOd,EAAPc,IACb,OACIhB,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,KAAGiB,KAAMD,EAAKE,UAAW,UAAYhB,EAAMgB,UAAUf,UACjDH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,QAAOf,SAAEY,OAIxC,E,yECCMI,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8BAIpBC,EAAYH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qQActBG,EAAcL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,mPAgBxBK,EAAgBP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6GAO1BO,EAAWT,EAAAA,GAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,ybA8ErBS,EAAO,SAAHC,GAAgB,IAAXC,EAAID,EAAJC,KACJlB,EAAgDkB,EAAhDlB,KAAMmB,EAA0CD,EAA1CC,YAAaC,EAA6BF,EAA7BE,UAAWC,EAAkBH,EAAlBG,SAAUC,EAAQJ,EAARI,KACzChC,EAAsB,wEAAd8B,EAAsF,CAACzB,UAAW,WAAa,CAACA,UAAW,SAEzI,OACI4B,EAAAA,EAAAA,MAACf,EAAS,CAAApB,SAAA,EACNH,EAAAA,EAAAA,KAAA,OAAKa,IAAKsB,EAAWrB,IAAI,mBAAmBT,MAAO,CAACA,MAAAA,MACpDiC,EAAAA,EAAAA,MAACb,EAAW,CAAAtB,SAAA,EACRH,EAAAA,EAAAA,KAAA,MAAAG,SAAKY,KACLf,EAAAA,EAAAA,KAAA,KAAAG,SAAI+B,KACJI,EAAAA,EAAAA,MAACX,EAAa,CAAAxB,SAAA,EACVH,EAAAA,EAAAA,KAACuC,EAAM,CAACvB,IAAKoB,EAAUlB,UAAU,eAAeH,KAAK,cACrDf,EAAAA,EAAAA,KAACuC,EAAM,CAACvB,IAAKqB,EAAMnB,UAAU,oBAAoBH,KAAK,iBAK1E,EAEA,EAxEmB,WAEf,IAAAyB,GAAwBC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BP,EAAIS,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAmDC,EAAAA,EAAAA,KAA5CC,EAAOF,EAAPE,QAASxD,EAAKsD,EAALtD,MAAOyD,EAAYH,EAAZG,aAAcC,EAAUJ,EAAVI,YAErCC,EAAAA,EAAAA,YAAU,WACNC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,WACHG,cAAcF,EAClB,CACJ,GAAG,IAEH,IAAMG,EAAe,SAACtB,GAClBW,EAAQX,EACZ,EAEMkB,EAAa,WACfF,IAEA,IAAMO,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DX,EAAaQ,GACRI,KAAKL,EACd,EAEMM,EAAetE,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzC6D,EAAUf,GAAU/C,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,IAAK,KACjCC,EAAYjB,GAAWxD,EAA+B,MAAtBS,EAAAA,EAAAA,KAAC+B,EAAI,CAACE,KAAMA,IAElD,OACIK,EAAAA,EAAAA,MAACnB,EAAO,CAAAhB,SAAA,CAGH0D,EACAC,EACAE,GACD1B,EAAAA,EAAAA,MAACT,EAAQ,CAAA1B,SAAA,EACLmC,EAAAA,EAAAA,MAAA,KAAAnC,SAAA,CAAG,+BAA2BH,EAAAA,EAAAA,KAAA,SAAK,6CAGnCA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAG,SAAG,2BACHH,EAAAA,EAAAA,KAAA,UAAQiE,QAASd,EAAYjC,UAAU,sBAAqBf,UACxDH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,QAAOf,SAAC,cAE3BH,EAAAA,EAAAA,KAAA,OAAKa,IAAKqD,EAASpD,IAAI,UAIvC,E,iDC3GA,EAjBiB,WACb,OACIwB,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAAhE,SAAA,EACIH,EAAAA,EAAAA,KAAA,KAAGkB,UAAU,eAAcf,SAAC,kDAC5BmC,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,WAAUf,SAAA,EACrBmC,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,yBAAwBf,SAAA,EACnCH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,4BACflB,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,6BAEnBlB,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,2BACflB,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,2BACflB,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,+BAI/B,ECRMkD,EAAahD,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gQAgBvBH,EAAUC,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4RAkBpB+C,EAAiBjD,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+EAM3BgD,EAAOlD,EAAAA,GAAAA,GAASQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yOAwDhBS,EAAO,SAAHC,GAAkB,IAAZC,EAAID,EAAJC,KACJlB,EAAyDkB,EAAzDlB,KAAMmB,EAAmDD,EAAnDC,YAAaC,EAAsCF,EAAtCE,UAAWC,EAA2BH,EAA3BG,SAAUC,EAAiBJ,EAAjBI,KAAMkC,EAAWtC,EAAXsC,OAEhDP,EACgB,IAAlBO,EAAOxF,QACHiB,EAAAA,EAAAA,KAAA,MAAAG,SAAI,0CAEJoE,EACKC,KAAI,SAACC,EAAMC,GACR,OAAO1E,EAAAA,EAAAA,KAAA,MAAAG,SAAasE,EAAK1D,MAAT2D,EACpB,IACCC,MAAM,EAAG,IAGtB,OACIrC,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAAhE,SAAA,EACImC,EAAAA,EAAAA,MAACnB,EAAO,CAAAhB,SAAA,EACJH,EAAAA,EAAAA,KAAA,OAAKa,IAAKsB,EAAWrB,IAAKC,KAC1BuB,EAAAA,EAAAA,MAAA,OAAAnC,SAAA,EACIH,EAAAA,EAAAA,KAAA,MAAAG,SAAKY,KACLuB,EAAAA,EAAAA,MAAC+B,EAAc,CAAAlE,SAAA,EACXH,EAAAA,EAAAA,KAACuC,EAAM,CACHvB,IAAKoB,EACLlB,UAAU,eACVH,KAAK,cAETf,EAAAA,EAAAA,KAACuC,EAAM,CACHvB,IAAKqB,EACLnB,UAAU,oBACVH,KAAK,mBAKrBf,EAAAA,EAAAA,KAAA,KAAAG,SAAI+B,KACJlC,EAAAA,EAAAA,KAAA,MAAAG,SAAI,aAEJH,EAAAA,EAAAA,KAACsE,EAAI,CAAAnE,SAAE6D,MAGnB,EAEA,EArFiB,SAAC9D,GAEd,IAAAsC,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BP,EAAIS,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAuCC,EAAAA,EAAAA,KAAhCC,EAAOF,EAAPE,QAASxD,EAAKsD,EAALtD,MAAOyD,EAAYH,EAAZG,cAEvBE,EAAAA,EAAAA,YAAW,WACPC,GACJ,GAAG,CAACjD,EAAM0E,SAGV,IAAMrB,EAAe,SAACtB,GAClBW,EAAQX,EACZ,EAGMkB,EAAa,WACf,IAAMyB,EAAS1E,EAAM0E,OAChBA,GAIL5B,EAAa4B,GACRhB,KAAKL,EACd,EAEMsB,EAAW5C,GAAQc,GAAWxD,EAAQ,MAAOS,EAAAA,EAAAA,KAAC8E,EAAQ,IACtDjB,EAAetE,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzC6D,EAAUf,GAAU/C,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,IAAM,KAClCC,EAAYjB,GAAWxD,IAAU0C,EAEnC,MADAjC,EAAAA,EAAAA,KAAC+B,EAAI,CAACE,KAAMA,IAGhB,OACIK,EAAAA,EAAAA,MAAC8B,EAAU,CAAAjE,SAAA,CACN0E,EACAhB,EACAC,EACAE,IAGb,E,8BC5BA,EAhEmB,WACf,IAAAxB,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BP,EAAIS,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAyDC,EAAAA,EAAAA,KAAlDC,EAAOF,EAAPE,QAASxD,EAAKsD,EAALtD,MAAOwF,EAAkBlC,EAAlBkC,mBAAoB9B,EAAUJ,EAAVI,WAErCM,EAAe,SAACtB,GAClBW,EAAQX,EACZ,EASM4B,EAAetE,GAAQS,EAAAA,EAAAA,KAAA,OAAAG,UAAKH,EAAAA,EAAAA,KAACC,EAAAA,EAAY,MAAW,KAEpD+E,EAAW/C,EAAcA,EAAKlD,OAAS,GACzBuD,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,uBAAiBf,SAAA,EAC5BmC,EAAAA,EAAAA,MAAA,KAAAnC,SAAA,CAAG,mBAAiB8B,EAAK,GAAGlB,KAAK,aACjCf,EAAAA,EAAAA,KAACiF,EAAAA,GAAI,CAACC,GAAE,eAAA7F,OAAiB4C,EAAK,GAAGuB,IAAMtC,UAAU,2BAA0Bf,UACvEH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,QAAOf,SAAC,kBAGnCH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,gBAAef,SAAC,uEAPvB,KAmBxB,OACImC,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,SAAQf,SAAA,EACnBH,EAAAA,EAAAA,KAACmF,EAAAA,GAAM,CACHC,cAAe,CACXC,SAAU,IAEdC,iBAAmBC,EAAAA,GAAW,CAC1BF,SAAUE,EAAAA,KAAaC,SAAS,6BAEpCC,SAAW,SAAAzD,GAAiB,IArCpBjB,EAqCKsE,EAAQrD,EAARqD,SArCLtE,EAqC+BsE,EApC/CpC,IAEA8B,EAAmBhE,GACd6C,KAAKL,EAiC8C,EAAEpD,UAClDmC,EAAAA,EAAAA,MAACoD,EAAAA,GAAI,CAAAvF,SAAA,EACDH,EAAAA,EAAAA,KAAA,SAAO2F,QAAQ,WAAUxF,SAAC,kCAC1BmC,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,gBAAef,SAAA,EAC1BH,EAAAA,EAAAA,KAAC4F,EAAAA,GAAK,CAACC,KAAK,OAAOC,YAAY,aAAatC,GAAG,WAAWzC,KAAK,cAC/Df,EAAAA,EAAAA,KAAA,UAAQ6F,KAAK,SAAS3E,UAAU,sBAAsB6E,SAAUhD,EAAQ5C,UACpEH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,QAAOf,SAAC,eAG/BH,EAAAA,EAAAA,KAACgG,EAAAA,GAAkB,CAACC,UAAU,MAAM/E,UAAU,gBAAgBH,KAAK,kBAG1EiE,EACAnB,IAIb,EC1DM1C,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qLASpBgD,EAAOlD,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uHAOjB4E,EAAc9E,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4HAoJ9B6E,EAAAA,UAAqB,CACjBvB,OAAQwB,IAAAA,QAGZ,OAhJiB,SAAClG,GACd,IAAAsC,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC6D,EAAY3D,EAAA,GAAEE,EAAOF,EAAA,GAC5B4D,GAAgC7D,EAAAA,EAAAA,UAAS,IAAG8D,GAAA5D,EAAAA,EAAAA,GAAA2D,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA4CjE,EAAAA,EAAAA,WAAS,GAAKkE,GAAAhE,EAAAA,EAAAA,GAAA+D,EAAA,GAAnDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA4BrE,EAAAA,EAAAA,UAAS,KAAIsE,GAAApE,EAAAA,EAAAA,GAAAmE,EAAA,GAAlCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAkCzE,EAAAA,EAAAA,WAAS,GAAM0E,GAAAxE,EAAAA,EAAAA,GAAAuE,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BtE,GAAyDC,EAAAA,EAAAA,KAAlDC,EAAOF,EAAPE,QAASxD,EAAKsD,EAALtD,MAAO+H,EAAgBzE,EAAhByE,iBAEjBC,GAF+C1E,EAAZ2E,aAElB,SAAChE,GACpBZ,EAAQY,EACZ,IAEAN,EAAAA,EAAAA,YAAU,WACNuE,OAAOC,iBAAiB,SAASC,EACrC,GAAG,KAEHzE,EAAAA,EAAAA,YAAU,YACF0D,GAAmB7D,GAAYqE,GAC/BQ,EAAUZ,GAAQ,GAGlBI,GACAK,OAAOC,iBAAiB,SAASC,EAEzC,GAAG,CAACf,IAEJ,IAAMgB,EAAY,SAACZ,EAAQa,GACbhB,GAAVgB,GAEAP,EAAiBN,GACZpD,KAAKkE,GACLC,SAAQ,kBAAMlB,GAAkB,kBAAM,CAAK,GAAC,GACrD,EAEMc,EAAW,SAAXA,IACEF,OAAOO,YAAcP,OAAOQ,YAAc,IAAMC,SAASC,KAAKC,eAC9DvB,GAAkB,GAClBY,OAAOY,oBAAoB,SAASV,GAE5C,EAEMG,EAAmB,SAACQ,GAEtB7B,GAAY,SAACD,GAAQ,SAAAnH,QAAAkJ,EAAAA,EAAAA,GAAS/B,IAAQ+B,EAAAA,EAAAA,GAAKD,GAAW,IACtDrB,GAAU,SAACD,GAAM,OAAKA,EAAS,CAAC,IAChCK,EAAaiB,EAAYvJ,OAAS,EACtC,EAEMyJ,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAU,SAAChE,GAEb8D,EAASG,QAAQC,SAAQ,SAACnE,GAAI,OAC1BA,EAAKoE,UAAUC,OAAO,sBAAsB,IAEhDN,EAASG,QAAQjE,GAAGmE,UAAUE,IAAI,uBAClCP,EAASG,QAAQjE,GAAGsE,OACxB,EAoDA,IAAMC,EAlDN,SAAqBC,GACjB,IAAMD,EAAQC,EAAI1E,KAAI,SAACC,EAAMC,GACzB,IAAIyE,EAAW,CAAEzI,UAAW,SAQ5B,MALI,wEADA+D,EAAKtC,YAGLgH,EAAW,CAAEzI,UAAW,WAIxBV,EAAAA,EAAAA,KAACoJ,EAAAA,EAAa,CAEVC,QAAS,IACTC,WAAW,aAAYnJ,UACvBmC,EAAAA,EAAAA,MAAA,MACIpB,UAAU,aACV+C,QAAS,WAELsD,EAAe9C,EAAKjB,IACpBkF,EAAQhE,EACZ,EAEA6E,IAAK,SAACC,GAAE,OAAMhB,EAASG,QAAQjE,GAAK8E,CAAE,EAEtCC,SAAS,IAETC,UAAW,SAACC,GACM,MAAVA,EAAElK,KAAyB,UAAVkK,EAAElK,MAEnBkK,EAAEC,iBACFrC,EAAe9C,EAAKjB,IACpBkF,EAAQhE,GAEhB,EAAEvE,SAAA,EAEFH,EAAAA,EAAAA,KAAA,OACIa,IAAK4D,EAAKtC,UACVrB,IAAK2D,EAAK1D,KACVV,MAAO8I,KAEXnJ,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,aAAYf,SAAEsE,EAAK1D,WA7BrC0D,EAAKjB,GAiClB,IAEA,OAAOxD,EAAAA,EAAAA,KAACsE,EAAI,CAAAnE,UAACH,EAAAA,EAAAA,KAAC6J,EAAAA,EAAe,CAAC5D,UAAW,KAAK9F,SAAE8I,KACpD,CAEca,CAAYtD,GAEpB3C,EAAetE,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAM,KAC1C6D,EAAUf,IAAY6D,GAAiB5G,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,IAAM,KAE3D,OACIzB,EAAAA,EAAAA,MAACnB,EAAO,CAAAhB,SAAA,EACJmC,EAAAA,EAAAA,MAAC4D,EAAW,CAAA/F,SAAA,EACRmC,EAAAA,EAAAA,MAACgC,EAAI,CAAAnE,SAAA,CACA0D,EACAC,EACAmF,MAELjJ,EAAAA,EAAAA,KAAA,UACIkB,UAAU,mCACV6E,SAAUa,EACVvG,MAAO,CAAEE,QAAS6G,EAAY,OAAS,SACvCnD,QAAS,kBAAM2D,EAAUZ,EAAO,EAAC7G,UAEjCH,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,QAAOf,SAAC,oBAG/BH,EAAAA,EAAAA,KAAC1B,EAAAA,EAAa,CAAA6B,UACVH,EAAAA,EAAAA,KAACmG,EAAQ,CAACvB,OAAQyB,OAEtBrG,EAAAA,EAAAA,KAAC+J,EAAU,MAGvB,ECpJA,GArBiB,WAIb,OACIzH,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAAhE,SAAA,EACImC,EAAAA,EAAAA,MAAC0H,EAAAA,EAAM,CAAA7J,SAAA,EACHH,EAAAA,EAAAA,KAAA,QAAMe,KAAK,cAAciD,QAAQ,+BACjChE,EAAAA,EAAAA,KAAA,SAAAG,SAAO,2BAEXH,EAAAA,EAAAA,KAAC1B,EAAAA,EAAa,CAAA6B,UACVH,EAAAA,EAAAA,KAACiK,EAAU,OAEfjK,EAAAA,EAAAA,KAAC1B,EAAAA,EAAa,CAAA6B,UACVH,EAAAA,EAAAA,KAACkK,GAAQ,OAEblK,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,gBAAgBL,IAAKsJ,EAAYrJ,IAAI,aAGhE,C,mGCoDA,EA5EyB,WACrB,IAAAsJ,ECAmB,WAGnB,IAAA5H,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCO,EAAOL,EAAA,GAAE2H,EAAU3H,EAAA,GAC1B4D,GAA0B7D,EAAAA,EAAAA,UAAS,MAAK8D,GAAA5D,EAAAA,EAAAA,GAAA2D,EAAA,GAAjC/G,EAAKgH,EAAA,GAAE+D,EAAQ/D,EAAA,GAIhBgE,GAAUC,EAAAA,EAAAA,aAAa,eAAAxI,GAAAyI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACb,SAAAC,EACO5J,GAAG,IAAA6J,EAAA1C,EAAA2C,EAAAC,EAAAC,EAAAC,EAAAnM,UAAA,OAAA4L,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAMoB,OALvBR,EAAMI,EAAAlM,OAAA,QAAAuM,IAAAL,EAAA,GAAAA,EAAA,GAAG,MACT9C,EAAI8C,EAAAlM,OAAA,QAAAuM,IAAAL,EAAA,GAAAA,EAAA,GAAG,KACPH,EAAOG,EAAAlM,OAAA,QAAAuM,IAAAL,EAAA,GAAAA,EAAA,GAAG,CAAC,eAAgB,oBAGtBZ,GAAW,GAAOc,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGSE,MAAMvK,EAAK,CAAC6J,OAAAA,EAAQ1C,KAAAA,EAAM2C,QAAAA,IAAU,KAAD,EAA5C,IAARC,EAAQI,EAAAK,MAEAC,GAAG,CAADN,EAAAE,KAAA,eACN,IAAIK,MAAM,mBAADrM,OAAoB2B,EAAG,cAAA3B,OAAa0L,EAASY,SAAU,KAAD,UAAAR,EAAAE,KAAA,GAGtDN,EAASa,OAAO,KAAD,GACf,OADbZ,EAAIG,EAAAK,KACVnB,GAAW,GAAQc,EAAAU,OAAA,SACZb,GAAI,QAGU,MAHVG,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAEXd,GAAW,GACXC,EAASa,EAAAW,GAAEC,SAAUZ,EAAAW,GAAA,yBAAAX,EAAAa,OAAA,GAAApB,EAAA,mBAIpD,gBAAAqB,GAAA,OAAAjK,EAAA5C,MAAA,KAAAN,UAAA,EA1B4B,GA0B1B,IAKH,MAAO,CAACiE,QAAAA,EAASwH,QAAAA,EAAShL,MAAAA,EAAO0D,YAFduH,EAAAA,EAAAA,cAAY,kBAAKF,EAAS,KAAK,GAAE,IAGxD,CDxCkD4B,GAAvCnJ,EAAOqH,EAAPrH,QAASwH,EAAOH,EAAPG,QAAShL,EAAK6K,EAAL7K,MAAO0D,EAAUmH,EAAVnH,WAE1BkJ,EAAW,4CACXC,EAAQ,0CAKR9E,EAAgB,eAAAtF,GAAAyI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAA5D,EAAAqF,EAAApB,EAAAnM,UAAA,OAAA4L,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAA2B,OAApBrE,EAAMiE,EAAAlM,OAAA,QAAAuM,IAAAL,EAAA,GAAAA,EAAA,GAJlB,IAIgCE,EAAAE,KAAA,EAC9Bd,EAAQ,GAADlL,OAAI8M,EAAQ,8BAAA9M,OAA6B2H,EAAM,KAAA3H,OAAI+M,IAAW,KAAD,EAA7E,OAAHC,EAAGlB,EAAAK,KAAAL,EAAAU,OAAA,SACFQ,EAAIrB,KAAKhG,QAAQR,IAAI8H,IAAoB,wBAAAnB,EAAAa,OAAA,GAAApB,EAAA,KACnD,kBAHqB,OAAA5I,EAAA5C,MAAA,KAAAN,UAAA,KAKhBkE,EAAY,eAAAuJ,GAAA9B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA6B,EAAOhJ,GAAE,IAAA6I,EAAA,OAAA3B,EAAAA,EAAAA,KAAAQ,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,cAAAoB,EAAApB,KAAA,EACRd,EAAQ,GAADlL,OAAI8M,EAAQ,eAAA9M,OAAcmE,EAAE,KAAAnE,OAAI+M,IAAW,KAAD,EAA1D,OAAHC,EAAGI,EAAAjB,KAAAiB,EAAAZ,OAAA,SACFS,EAAoBD,EAAIrB,KAAKhG,QAAQ,KAAG,wBAAAyH,EAAAT,OAAA,GAAAQ,EAAA,KAClD,gBAHiBP,GAAA,OAAAM,EAAAnN,MAAA,KAAAN,UAAA,KAKZ4N,EAAQ,eAAAC,GAAAlC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiC,EAAOpJ,GAAE,IAAA6I,EAAA,OAAA3B,EAAAA,EAAAA,KAAAQ,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACJd,EAAQ,GAADlL,OAAI8M,EAAQ,WAAA9M,OAAUmE,EAAE,KAAAnE,OAAI+M,IAAW,KAAD,EAAtD,OAAHC,EAAGQ,EAAArB,KAAAqB,EAAAhB,OAAA,SACFiB,EAAiBT,EAAIrB,KAAKhG,QAAQ,KAAG,wBAAA6H,EAAAb,OAAA,GAAAY,EAAA,KAC/C,gBAHaG,GAAA,OAAAJ,EAAAvN,MAAA,KAAAN,UAAA,KAKR0I,EAAY,eAAAwF,GAAAvC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsC,IAAA,IAAAjG,EAAAqF,EAAAa,EAAApO,UAAA,OAAA4L,EAAAA,EAAAA,KAAAQ,MAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OAAiB,OAAVrE,EAAMkG,EAAAnO,OAAA,QAAAuM,IAAA4B,EAAA,GAAAA,EAAA,GAAG,EAACC,EAAA9B,KAAA,EAChBd,EAAQ,GAADlL,OAAI8M,EAAQ,0BAAA9M,OAAyB2H,EAAM,KAAA3H,OAAI+M,IAAW,KAAD,EAAzE,OAAHC,EAAGc,EAAA3B,KAAA2B,EAAAtB,OAAA,SACFQ,EAAIrB,KAAKhG,QAAQR,IAAIsI,IAAiB,wBAAAK,EAAAnB,OAAA,GAAAiB,EAAA,KAChD,kBAHiB,OAAAD,EAAA5N,MAAA,KAAAN,UAAA,KAMfiG,EAAkB,eAAAqI,GAAA3C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0C,EAAOtM,GAAI,IAAAsL,EAAA,OAAA3B,EAAAA,EAAAA,KAAAQ,MAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,cAAAiC,EAAAjC,KAAA,EACnBd,EAAQ,GAADlL,OAAI8M,EAAQ,oBAAA9M,OAAmB0B,EAAI,KAAA1B,OAAI+M,IAAW,KAAD,EAAjE,OAAHC,EAAGiB,EAAA9B,KAAA8B,EAAAzB,OAAA,SACFQ,EAAIrB,KAAKhG,QAAQR,IAAI8H,IAAoB,wBAAAgB,EAAAtB,OAAA,GAAAqB,EAAA,KAChD,gBAHuBE,GAAA,OAAAH,EAAAhO,MAAA,KAAAN,UAAA,KAOfwN,EAAsB,SAACrK,GACzB,MAAO,CACHuB,GAAIvB,EAAKuB,GACTzC,KAAMkB,EAAKlB,KACXmB,YAAcD,EAAKC,YAAcD,EAAKC,YAAc,gCACpDC,UAAWF,EAAKE,UAAUqL,KAAO,IAAMvL,EAAKE,UAAUsL,UAYtDrL,SAAUH,EAAKyL,KAAK,GAAG1M,IACvBqB,KAAMJ,EAAKyL,KAAK,GAAG1M,IACnBuD,OAAQtC,EAAKsC,OAAO0E,MAE5B,EAEM6D,EAAmB,SAACa,GACtB,MAAO,CACHnK,GAAImK,EAAMnK,GACVoK,MAAOD,EAAMC,MACb1L,YAAcyL,EAAMzL,YAAcyL,EAAMzL,YAAc,iCACtD2L,MAAOF,EAAMG,UACb3L,UAAWwL,EAAMxL,UAAUqL,KAAO,IAAMG,EAAMxL,UAAUsL,UACxDM,MAAQJ,EAAMK,OAAO,GAAGD,MAAK,GAAA1O,OAAMsO,EAAMK,OAAO,GAAGD,MAAK,KAAM,gBAC9DE,UAAYN,EAAMO,YAAY,GAAKP,EAAMO,YAAY,GAAGC,SAAW,gBAE3E,EAGA,MAAO,CAACpL,QAAAA,EAASxD,MAAAA,EAAO+H,iBAAAA,EAAkBtE,aAAAA,EAAcC,WAAAA,EAAYuE,aAAAA,EAAckF,SAAAA,EAAU3H,mBAAAA,EAChG,C","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/button/button.js","components/randomChar/randomChar.js","components/skeleton/Skeleton.js","components/charInfo/charInfo.js","components/charSearch/charSearch.js","components/charList/charList.js","components/pages/MainPage.js","services/MarvelService.js","hooks/htttp.hook.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","const ErrorMessage = () => {\r\n    // В пути указывается так потому что используем статичные файлы из папки public\r\n    return (\r\n        <img style={{gridColumn: \"1/4\", display: \"block\", width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \" 0 auto\", alignSelf: 'center'}}\r\n             src={process.env.PUBLIC_URL + '/error.gif'} \r\n             alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","const Button = (props) => {\r\n    const {name, url} = props;\r\n    return (\r\n        <div>\r\n            <a href={url} className={\"button \" + props.className}>\r\n                <div className=\"inner\">{name}</div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Button;","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from \"../button/button\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\nimport Spinner from '../spinner/spinner.js';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst InfoBlock = styled.div`\r\n    display: flex;\r\n    width: 50%;\r\n    padding: 35px 35px 35px 40px;\r\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.25);\r\n\r\n    img {\r\n        margin-right: 30px;\r\n        width: 180px;\r\n        height: 180px;\r\n        object-fit: 'cover';\r\n    }  \r\n`;\r\n\r\nconst InfoWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2{\r\n        text-transform: uppercase;\r\n        font-size: 29px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    p {\r\n        font-size: 14px;\r\n        margin-bottom: 18px;\r\n    }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: auto;\r\n    width: 232px;\r\n`;\r\n\r\nconst TryBlock = styled.div`\r\n    width: 50%;\r\n    padding: 35px 35px 35px 40px;\r\n    background-color: #232222;\r\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.25);\r\n    position: relative;\r\n\r\n    p{\r\n        color: #FFFFFF;\r\n        font-size: 24px;\r\n        line-height: 28px;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    img {\r\n        position: absolute;\r\n        bottom: 14px;\r\n        right: -40px;\r\n    }\r\n\r\n    button {\r\n        margin-top: 13px;\r\n    }\r\n`;\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({}); // Пустой обьект персонажа куда запишем пришедшие данные с сервера\r\n    const {loading, error, getCharacter, clearError} = useMarvelService(); // Деструтуризируем результат функции сервис\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 30000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => { // Функция получения данных с сервера\r\n        clearError(); // Перед каждым запросом сбрасываем ошибку, если она есть, так как она не дает прогружаться контенту\r\n\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // Получаем случайное id для формирования обьекта персонажа\r\n        getCharacter(id) // Метод получение данных персонажа по id\r\n            .then(onCharLoaded) // Вызываем метод для записи обьекта персонажа с сервера в обьект state\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <Wrapper>\r\n            {/*loading ? <Spinner/> : <View char={char}/> /* Если состояние загрузки ТРУ загрузится вернет Спиннер, ФОЛС - компонент  View */}\r\n\r\n            {errorMessage /* Если не null отобразит компонент */}\r\n            {spinner /* Если не null отобразит компонент */}\r\n            {content /* Если не null отобразит компонент */}\r\n            <TryBlock>\r\n                <p>Random character for today!<br/>\r\n                   Do you want to get to know him better?\r\n                </p>\r\n                <br/>\r\n                <p>Or choose another one</p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"\"/>\r\n            </TryBlock>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\n// Отдельный компонент\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = char;\r\n    const style = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? {objectFit: 'contain'} : {objectFit: 'cover'};\r\n\r\n    return (\r\n        <InfoBlock>\r\n            <img src={thumbnail} alt=\"Random character\" style={{style}} />\r\n            <InfoWrapper>\r\n                <h2>{name}</h2>\r\n                <p>{description}</p>\r\n                <ButtonWrapper>\r\n                    <Button url={homepage} className=\"button__main\" name='homepage'/>\r\n                    <Button url={wiki} className=\"button__secondary\" name='wiki'/>\r\n                </ButtonWrapper>\r\n            </InfoWrapper>\r\n        </InfoBlock>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import styled from \"styled-components\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport Button from \"../button/button\";\r\n\r\nconst BigWrapper = styled.div`\r\n    padding: 25px;\r\n    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.25);\r\n    background-color: #fff;\r\n\r\n    p {\r\n        font-size: 14px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    h5 {\r\n        font-weight: 700;\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    column-gap: 25px;\r\n    margin-bottom: 15px;\r\n\r\n    h4 {\r\n        text-transform: uppercase;\r\n        font-weight: 700;\r\n        font-size: 22px;\r\n        margin-bottom: 35px;\r\n    }\r\n\r\n    img {\r\n        width: 150px;\r\n        height: 150px;\r\n    }\r\n`;\r\n\r\nconst ButtonsWrapper = styled.div`\r\n    display: flex;\r\n    row-gap: 10px;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst List = styled.ul`\r\n    display: flex;\r\n    row-gap: 10px;\r\n    flex-direction: column;\r\n    padding: 10px 0 10px;\r\n\r\n    li {\r\n        padding: 4px 10px;\r\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n        font-size: 14px;\r\n    }\r\n`;\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null); // Пустой обьект персонажа куда запишем пришедшие данные с сервера\r\n    const {loading, error, getCharacter} = useMarvelService();\r\n\r\n    useEffect( () => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    // Функция перезаписывания обьекта char, после получения его в аргумент  \r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    // Метод обновления обьекта state\r\n    const updateChar = () => {\r\n        const charId = props.charId; // Деструктуризируем переменную id из переданных по атрибутам props. \r\n        if (!charId) { // если ID undefined, то прерываем выполнение\r\n            return;\r\n        }\r\n\r\n        getCharacter(charId) // запрашиваем данные по ID обьекта\r\n            .then(onCharLoaded) // Полученные данные с сервера (promise) передаем в функцию \r\n    };\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton />; // Если обьект создан или состояние загрузки, или ошибки - игнорируем / равно <Sceleton/> компоненту\r\n    const errorMessage = error ? <ErrorMessage/> : null; // если состояние error - равен компоненту <ErrorMessage/> / равен ничему\r\n    const spinner = loading ? <Spinner /> : null; // если состояние загрузки - равен <Spinner/> / равен ничему\r\n    const content = !(loading || error || !char) ? ( // если не (состояние загрузки / ошибка / обьект создан)\r\n        <View char={char} />\r\n    ) : null;\r\n\r\n    return (\r\n        <BigWrapper>\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </BigWrapper>\r\n    );\r\n}\r\n\r\n// Дополнительный компонент для разделения логики интерфейса и состояния\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n    const content =\r\n        comics.length === 0 ? ( // Если массив из комиксов пустой\r\n            <li> Not found any comic about this hero!</li>\r\n        ) : (\r\n            comics\r\n                .map((item, i) => {\r\n                    return <li key={i}>{item.name}</li>;\r\n                })\r\n                .slice(0, 10)\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <img src={thumbnail} alt={name} />\r\n                <div>\r\n                    <h4>{name}</h4>\r\n                    <ButtonsWrapper>\r\n                        <Button\r\n                            url={homepage}\r\n                            className=\"button__main\"\r\n                            name=\"homepage\"\r\n                        />\r\n                        <Button\r\n                            url={wiki}\r\n                            className=\"button__secondary\"\r\n                            name=\"wiki\"\r\n                        />\r\n                    </ButtonsWrapper>\r\n                </div>\r\n            </Wrapper>\r\n            <p>{description}</p>\r\n            <h5>Comics:</h5>\r\n\r\n            <List>{content}</List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik'; // Подключаем библиотеку для форм ErrorMessage импортируем как FormikErrorMessage, т.к. уже занято имя\r\nimport * as Yup from 'yup'; // Yup библиотекадля валидации форм\r\nimport {Link} from 'react-router-dom'; // Берем Link из библиотеки роутер\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearch.scss\"\r\n\r\nconst CharSearch = () => {\r\n    const [char, setChar] = useState(null); // Сюда помещаем обьект персонажа после поиска формы,\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => { // Отдельный метод по обновлению обьекта персонажа\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => { // функция для получения данных с сервера по имени персонажа и сброса ошибки при связи с сервером\r\n        clearError(); // Сьрос ошибки при связи с сервером\r\n\r\n        getCharacterByName(name) // Поолучение обьекта персонажа по имени с сервера\r\n            .then(onCharLoaded); // Записываем результат промиса с сервера в состояние char\r\n    }\r\n\r\n    const errorMessage = error ? <div><ErrorMessage/></div> : null; // Если есть ощибка, равно Компоненту ошибки, нет - ничего\r\n\r\n    const results = !char ? null : char.length > 0 ? // результат равен если char undefined (true) то null, если char длина больше 0, то возвращаем структуру (успех)\r\n                        <div className='search__sucсess'>\r\n                            <p>There is! Visit {char[0].name} page?</p>\r\n                            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                                <div className=\"inner\">to page</div>\r\n                            </Link>\r\n                        </div> : // Если и не это, то возвращаем структуру (персонаж не найден)\r\n                    <div className=\"search__error\">\r\n                        The character was not found. Check the name and try again, please.\r\n                    </div>;\r\n\r\n\r\n// Formik задаем начальные настройки инпута InitialValues, validationSchema, onSubmit\r\n// Настройки валидации задаем с помощью библиотеки Yup - должна быть строка и заполнена, если не заплнена выводим сообщение\r\n// Во время отправки формы передаем введенное имя в функцию по обновлению состояния Char \r\n// Имя инпута и имя начальных настроек Formik должны совпадать\r\n// Добавляем аттрибут disavled для кнопки, когда есть состояние загрузки\r\n// FormikErrorMessage - ошибка валидации указываем имя инпута, чтобы сказать что это его ошибка, компонент в который обернуть сообщение и класс компонента\r\n// В конце выводим результат поиска и сообщение об ошибке при связи с сервером\r\n    return (\r\n        <div className='search'>\r\n            <Formik\r\n                initialValues={{\r\n                    charName: '',\r\n                }}\r\n                validationSchema={ Yup.object({\r\n                    charName: Yup.string().required('This field is required!')\r\n                })}\r\n                onSubmit= {({charName}) => {updateChar(charName)}}>\r\n                <Form>\r\n                    <label htmlFor='charName'>Or find a character by name:</label>\r\n                    <div className=\"input__wraper\">\r\n                        <Field type=\"text\" placeholder=\"Enter name\" id='charName' name='charName'/>\r\n                        <button type='submit' className=\"button button__main\" disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"search__error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default CharSearch;","import styled from \"styled-components\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./charList.scss\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport CharInfo from \"../charInfo/charInfo\";\r\nimport CharSearch from \"../charSearch/charSearch\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 44px;\r\n    display: grid;\r\n    grid-template-columns: 650px 425px;\r\n    grid-template-rows: auto auto auto;\r\n    gap: 30px 25px;\r\n    align-items: start;\r\n`;\r\n\r\nconst List = styled.div`\r\n    display: grid;\r\n    row-gap: 30px;\r\n    column-gap: 25px;\r\n    grid-template-columns: repeat(3, 200px);\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 30px;\r\n    grid-row: 1 / -1;\r\n`;\r\n\r\nconst CharList = (props) => {\r\n    const [selectedChar, setChar] = useState(null);\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(true);\r\n    const [offset, setOffset] = useState(250);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {loading, error, getAllCharacters, getAllComics} = useMarvelService();\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",onScroll);\r\n    }, []);\r\n\r\n    useEffect(()=> {\r\n        if (newItemLoading && !loading && !charEnded) {\r\n            onRequest(offset, true);\r\n        }\r\n\r\n        if(!charEnded) {\r\n            window.addEventListener(\"scroll\",onScroll);\r\n        } \r\n    }, [newItemLoading])\r\n\r\n    const onRequest = (offset, initial) => { // Добавляем дополнительный аргумент initial, чтобы знать первичная ли это загрузка\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true) // И проверяем первая загрузка? \r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .finally(() => setNewItemLoading(() => false))\r\n    };\r\n\r\n    const onScroll = () => {\r\n        if (window.innerHeight + window.pageYOffset + 20 >= document.body.offsetHeight) {\r\n            setNewItemLoading(true);\r\n            window.removeEventListener(\"scroll\",onScroll);\r\n        }\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        // В функцию передаем новых персонажей (масив)\\\r\n        setCharList((charList) => [...charList, ...newCharList]); // новое значение charList = старое значение + новые персонажи\r\n        setOffset((offset) => offset + 9); // изменяем каждый следущий вызов персонажей на +9\r\n        setCharEnded(newCharList.length < 9 ? true : false);\r\n    };\r\n\r\n    const itemRefs = useRef([]); // Создаем пустой массив для формирования ссылок на ДОМ элементы списка персонажей\r\n\r\n    const onFocus = (i) => {\r\n        // Создаем метод onFocus, аргумент уникальный id элемента(в данном случае индекс в массиве списка персонажей). Метод отвечает за изменение класса и установке фокуса\r\n        itemRefs.current.forEach((item) =>\r\n            item.classList.remove(\"char__item_selected\")\r\n        ); // Перебираем каждый элемент массива ссылок ДОМ и убираем класс\r\n        itemRefs.current[i].classList.add(\"char__item_selected\"); // Добавляем к элементу[индекс] класс\r\n        itemRefs.current[i].focus(); // Устанавливаем фокус на элемент[индекс]\r\n    };\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { objectFit: \"cover\" };\r\n            if (\r\n                item.thumbnail ===\r\n                \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n            ) {\r\n                imgStyle = { objectFit: \"unset\" };\r\n            }\r\n\r\n            return (\r\n                <CSSTransition\r\n                key={item.id}\r\n                    timeout={500}\r\n                    classNames=\"char__item\">\r\n                    <li\r\n                        className=\"char__item\"\r\n                        onClick={() => {\r\n                            // Запускаем функции передаем айди и индекс массива\r\n                            onCharSelected(item.id);\r\n                            onFocus(i);\r\n                        }}\r\n                        // Создаем ref ссылку на элемент DOM\r\n                        ref={(el) => (itemRefs.current[i] = el)}\r\n                        // Доьавляем tabIndex чтобы работало переключение по ТАБ\r\n                        tabIndex=\"0\"\r\n                        // Добавляем событие по кнопке, если пробел или ентер\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === \" \" || e.key === \"Enter\") {\r\n                                // Запускаем функции передаем айди и индекс массива\r\n                                e.preventDefault();\r\n                                onCharSelected(item.id);\r\n                                onFocus(i);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <img\r\n                            src={item.thumbnail}\r\n                            alt={item.name}\r\n                            style={imgStyle}\r\n                        />\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            );\r\n        });\r\n\r\n        return <List><TransitionGroup component={null}>{items}</TransitionGroup></List>;\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <ListWrapper>\r\n                <List>\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {items}\r\n                </List>\r\n                <button\r\n                    className=\"button button__main button__long\"\r\n                    disabled={newItemLoading}\r\n                    style={{ display: charEnded ? \"none\" : \"block\" }}\r\n                    onClick={() => onRequest(offset)}\r\n                >\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </ListWrapper>\r\n            <ErrorBoundary>\r\n                <CharInfo charId={selectedChar} />\r\n            </ErrorBoundary>\r\n            <CharSearch />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number,\r\n};\r\n\r\nexport default CharList;\r\n","import { Helmet } from \"react-helmet\"; // Компонент\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from \"../../resources//img/vision.png\";\r\nimport RandomChar from \"../randomChar/randomChar\";\r\nimport CharList from \"../charList/charList\";\r\n\r\nconst MainPage = () => {\r\n\r\n    // прописываем нужные мета теги, которые нам нужны\r\n    // прописываем нужный title\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\"/> \r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n                <CharList/>\r\n            </ErrorBoundary>\r\n            <img className=\"bg-decoration\" src={decoration} alt='vision'/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/htttp.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp(); // Вытаскиваем сущности {loading, request, error, clearError} из хука (функции)\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // База адресса запроса (для сохранения принципа dont repeat your self)\r\n    const _apiKey='apikey=b5fd0bed3b38fddcc8ec498949b311c0'; // Наш ключ запроса (для сохранения принципа dont repeat your self)\r\n    const _baseOffset = 210; // Базовая переменная количества загрузки персонажей\r\n\r\n    // Формируем методы запросы к API\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => { // Получение данных персонажей, передаем количество нужных персонажей, по умолчанию _baseOfsset\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // Используем метод с адрессом на баззу данных всех персонажей\r\n        return res.data.results.map(_transformCharacter); // Переберет каждый элемент из массива и трансформирует и запишет в новый обьект \r\n    }\r\n\r\n    const getCharacter = async (id) => { // Получение одного персонажа по id /v1/public/characters/{characterId}\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`); // Используем метод с адрессом на баззу данных одного персонажа по id\r\n        return _transformCharacter(res.data.results[0]); // Возвращаем уже трансформированный обьект\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 8) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n \r\n    // Получение обьекта персонажа по имени персонажа (В API есть такая возможность)\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\r\n   // Создаем метод трансформации данных\r\n    const _transformCharacter = (char) => { // в аргумент передадим путь нужным данным в обьекте\r\n        return {\r\n            id: char.id, // Айди важный параметр для работы, передаем потом в качестве пропсов компонентам\r\n            name: char.name, // Чтобы формировать обьект необходимо знать структуру полученных данных\r\n            description: (char.description ? char.description : \"No description for this hero(\"),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, // картинка =  url + расширение\r\n            /* Пример кгде хранится url\r\n            \"urls\": [\r\n                        {\r\n                            \"type\": \"detail\",\r\n                            \"url\": \"http://marvel.com/characters/384/captain_flint?utm_campaign=apiRef&utm_source=b5fd0bed3b38fddcc8ec498949b311c0\"\r\n                        },\r\n                        {\r\n                            \"type\": \"comiclink\",\r\n                            \"url\": \"http://marvel.com/comics/characters/1011196/captain_flint?utm_campaign=apiRef&utm_source=b5fd0bed3b38fddcc8ec498949b311c0\"\r\n                        }\r\n            */\r\n            homepage: char.urls[0].url, // ссылка \r\n            wiki: char.urls[1].url, // ссылка\r\n            comics: char.comics.items            \r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: (comic.description ? comic.description : \"No description for this comic(\"),\r\n            pages: comic.pageCount,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: (comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available'),\r\n            languages: (comic.textObjects[0] ? comic.textObjects[0].language : 'not available'),\r\n        }\r\n    }\r\n\r\n    // Будем возвращать сущности из этой функции\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\n// Данный хук позволяет делать запросы и получать нужные данные\r\nexport const useHttp = () => { // use - говорит, что это хук. http - обычно называют сущности которые работают с запросами\r\n// вынесем сюда повторяющиеся сущности из CharList\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n// так как это связть с сервером тут должен происходить запрос\r\n\r\n    const request = useCallback( // Используем callback hook, потому что будем помещать эту функцию внутри приложения и дочерних компонентах. \r\n                    async (  // Так же из за запросов на сервер будет async\r\n                           url, // url для запроса\r\n                           method = 'GET', // аргумент метод, по умолчанию GET\r\n                           body = null, // body - по умолчинаю null\r\n                           headers = {'Content-Type': 'application/json'} // заголовок по умолчанию\r\n                          ) => { \r\n\r\n                                setLoading(true); // Перед отправкой запроса ставим статус загрузки\r\n\r\n                                try { // делаем попытку запроса на сервер\r\n                                    const response = await fetch(url, {method, body, headers}); // создаем переменную, куда записываем ответ от сервера с заданным аргуменами адресса и обьектом настроек\r\n\r\n                                    if (!response.ok) { // Проверка на ответ от сервера\r\n                                        throw new Error(`Could not fetch ${url}, status: ${response.status}`); // Если выкинете ошибку, то переместит в блок catch\r\n                                    }\r\n\r\n                                    const data = await response.json(); // записываем в переменную ответ от сервера конвертировав его из json\r\n                                    setLoading(false); // Меняем статус загрузки\r\n                                    return data; // Функция вернет данные полученные от сервера\r\n                                } catch(e) { // Блок ошибки\r\n                                    setLoading(false); // Статус загрузки завершился (ошибкой)\r\n                                    setError(e.message); // Меняем состояние ошибки и он будет равен не null, а текст ошибки\r\n                                    throw e; // Выкидываем ошибку\r\n                                }                         \r\n\r\n    }, []) \r\n\r\n    // Функция чистки от ошибок (сброса)\r\n    const clearError = useCallback(()=> setError(null), []); // Если с сервера прийдет ошибка (например нет нужного обьекта по айди), то эта функция позволит скинуть ошибку\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","style","gridColumn","display","width","height","objectFit","margin","alignSelf","src","alt","name","url","href","className","Wrapper","styled","_templateObject","_taggedTemplateLiteral","InfoBlock","_templateObject2","InfoWrapper","_templateObject3","ButtonWrapper","_templateObject4","TryBlock","_templateObject5","View","_ref","char","description","thumbnail","homepage","wiki","_jsxs","Button","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","_Fragment","BigWrapper","ButtonsWrapper","List","comics","map","item","i","slice","charId","skeleton","Skeleton","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","disabled","FormikErrorMessage","component","ListWrapper","CharInfo","PropTypes","selectedChar","_useState3","_useState4","charList","setCharList","_useState5","_useState6","newItemLoading","setNewItemLoading","_useState7","_useState8","offset","setOffset","_useState9","_useState10","charEnded","setCharEnded","getAllCharacters","onCharSelected","getAllComics","window","addEventListener","onScroll","onRequest","initial","onCharListLoaded","finally","innerHeight","pageYOffset","document","body","offsetHeight","removeEventListener","newCharList","_toConsumableArray","itemRefs","useRef","onFocus","current","forEach","classList","remove","add","focus","items","arr","imgStyle","CSSTransition","timeout","classNames","ref","el","tabIndex","onKeyDown","e","preventDefault","TransitionGroup","renderItems","CharSearch","Helmet","RandomChar","CharList","decoration","_useHttp","setLoading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","method","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","getComic","_ref3","_callee3","_context3","_transformComics","_x2","_ref4","_callee4","_args4","_context4","_ref5","_callee5","_context5","_x3","path","extension","urls","comic","title","pages","pageCount","price","prices","languages","textObjects","language"],"sourceRoot":""}