{"version":3,"file":"static/js/501.c893edc0.chunk.js","mappings":"8LAoDA,UAxCmB,SAAHA,GAA+B,IAA1BC,EAASD,EAATC,UAAWC,EAAQF,EAARE,SACrBC,GAAMC,EAAAA,EAAAA,MAAND,GACPE,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA6DC,EAAAA,EAAAA,KAAtDC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAAOC,EAAQJ,EAARI,SAAUC,EAAYL,EAAZK,aAAcC,EAAUN,EAAVM,YAE/CC,EAAAA,EAAAA,YAAU,WACNC,GACJ,GAAG,CAAChB,IAEJ,IAAMgB,EAAa,WAGf,OAFAF,IAEQf,GACJ,IAAK,QACDa,EAASZ,GAAIiB,KAAKC,GAClB,MACJ,IAAK,aACDL,EAAab,GAAIiB,KAAKC,GAElC,EAEMA,EAAe,SAACZ,GAClBC,EAAQD,EACZ,EAEMa,EAAeR,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzCC,EAAUZ,GAAUU,EAAAA,EAAAA,KAACG,EAAAA,EAAO,IAAK,KACjCC,EAAYd,GAAWC,IAAUL,EAAmC,MAA3Bc,EAAAA,EAAAA,KAACtB,EAAS,CAACQ,KAAMA,IAGhE,OACImB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIP,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,IACTT,EACAG,EACAE,IAGb,C","sources":["components/pages/SinglePage.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\n// Хук useParams возвращает объект пар ключ/значение динамических параметров из текущего URL-адреса, которые были сопоставлены <Route path>. \r\n// Дочерние маршруты наследуют все параметры родительских маршрутов.\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from '../appBanner/appBanner';\r\n\r\n// Компонент SinglePage через props передается Component - компонент с версткой (SingleCharacterLayout или SingleComicLayout) и тип dataType (comics или characters)\r\n// dataType нам нужен для определения какой id передается комиксов или персонажей \r\nconst SinglePage = ({Component, dataType}) => { \r\n    const {id} = useParams(); //Хук useParams возвращает объект пар ключ/значение динамических параметров из текущего URL-адреса - в нашем случае id\r\n    const [data, setData] = useState(null); // Создаем состояние с данными с сервера, изначально null\r\n    const {loading, error, getComic, getCharacter, clearError} = useMarvelService(); // Дуструтуризируем состояния и функции из VarvelService\r\n\r\n    useEffect(() => { // При каждом изменении значения URL адресса обновляем состояние data\r\n        updateData()\r\n    }, [id])\r\n\r\n    const updateData = () => { // функция обновления data\r\n        clearError(); // сбрасываем ошибку связи с сервером\r\n\r\n        switch (dataType) { // В зависимости от dataType делаем запрос id по комиксам или персонажам \r\n            case 'comic': \r\n                getComic(id).then(onDataLoaded); // записываем comics data из сервера в состояние data\r\n                break;\r\n            case 'characters':\r\n                getCharacter(id).then(onDataLoaded); // записываем comics data из сервера в состояние data\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => { // функция записи data в состояние data\r\n        setData(data);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null; // errorMessage равно если есть состояние ошибки, то компонент ErrorMessage, нет ошибки - ничего\r\n    const spinner = loading ? <Spinner/> : null; // spinner равен если есть состояние загрузки, то компонент Spinner, нет загрузки - ничего\r\n    const content = !(loading || error || !data) ? <Component data={data}/> : null; // Контент равен если не стостояние загрузки или состояние ошибки и (не не) есть дата, то равен Компоненту с пропсом дата, нет - ничего\r\n\r\n    // Функциональный компонент возвращает данную структуру\r\n    return ( \r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;"],"names":["_ref","Component","dataType","id","useParams","_useState","useState","_useState2","_slicedToArray","data","setData","_useMarvelService","useMarvelService","loading","error","getComic","getCharacter","clearError","useEffect","updateData","then","onDataLoaded","errorMessage","_jsx","ErrorMessage","spinner","Spinner","content","_jsxs","_Fragment","children","AppBanner"],"sourceRoot":""}